#ifdef PARSER_DECLARATION
void parseCalc();
void parseExpr();
void parseTerm();
void parseFactor();
#endif // of PARSER_DECLARATION
#ifdef PARSER_DEFINITION
void Parser::parseCalc() {
  std::vector<llvm::StringRef> vars;
  if (Tok.getKind() == tok::KW_with) {
    advance();
    if (expect(tok::Ident))
      goto _error;
    vars.push_back(llvm::StringRef(Tok.getLoc(), Tok.getLength());
    advance();
    while (Tok.getKind() == tok::comma) {
      advance();
      if (expect(tok::Ident))
        goto _error;
      vars.push_back(llvm::StringRef(Tok.getLoc(), Tok.getLength());
      advance();
    }
    if (consume(tok::colon))
      goto _error;
  }
  parseExpr();
  /* CODE*/
  return;
_error:
  while (Tok.getKind() != tok::eoi)
    advance();
}

void Parser::parseExpr() {
  parseTerm();
  /* CODE*/
  while (Tok.isOneOf(tok::plus, tok::minus)) {
    if (Tok.getKind() == tok::plus) {
      advance();
    }
    else if (Tok.getKind() == tok::minus) {
      advance();
    }
    /* CODE*/
    parseTerm();
    /* CODE*/
  }
  return;
_error:
  while (!Tok.isOneOf(tok::r_paren, tok::eoi))
    advance();
}

void Parser::parseTerm() {
  parseFactor();
  /* CODE*/
  while (Tok.isOneOf(tok::star, tok::slash)) {
    if (Tok.getKind() == tok::star) {
      advance();
    }
    else if (Tok.getKind() == tok::slash) {
      advance();
    }
    /* CODE*/
    parseFactor();
    /* CODE*/
  }
  return;
_error:
  while (!Tok.isOneOf(tok::r_paren, tok::plus, tok::minus, tok::eoi))
    advance();
}

void Parser::parseFactor() {
  if (Tok.getKind() == tok::Number) {
    /* CODE*/
    advance();
  }
  else if (Tok.getKind() == tok::Ident) {
    /* CODE*/
    advance();
  }
  else if (Tok.getKind() == tok::l_paren) {
    advance();
    parseExpr();
    /* CODE*/
    if (consume(tok::r_paren))
      goto _error;
  }
  return;
_error:
  while (!Tok.isOneOf(tok::r_paren, tok::star, tok::plus, tok::minus, tok::slash, tok::eoi))
    advance();
}
#endif // of PARSER_DEFINITION
